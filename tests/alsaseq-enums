#!/usr/bin/env python3

from sys import exit
import gi
gi.require_version('ALSASeq', '0.0')
from gi.repository import ALSASeq

client_number_enumerators = (
    'SYSTEM',
    'DUMMY',
    'OSS',
)

client_type_enumerators = (
    'NO_CLIENT',
    'USER_CLIENT',
    'KERNEL_CLIENT',
)

client_filter_flags = (
    'BROADCAST',
    'MULTICAST',
    'BOUNCE',
    'USE_EVENT',
)

port_number_enumerators = (
    'SYSTEM',
    'DUMMY',
    'OSS',
)

port_type_flags = (
    'SPECIFIC',
    'MIDI_GENERIC',
    'MIDI_GM',
    'MIDI_GS',
    'MIDI_XG',
    'MIDI_MT32',
    'MIDI_GM2',
    'SYNTH',
    'DIRECT_SAMPLE',
    'SAMPLE',
    'HARDWARE',
    'SOFTWARE',
    'SYNTHESIZER',
    'PORT',
    'APPLICATION',
)

port_cap_flags = (
    'READ',
    'WRITE',
    'SYNC_READ',
    'SYNC_WRITE',
    'DUPLEX',
    'SUBS_READ',
    'SUBS_WRITE',
    'NO_EXPORT',
)

port_cond_flags = (
    'GIVEN_PORT',
    'TIMESTAMP',
    'TIME_REAL',
)

event_type_enumerators = (
    'SYSTEM',
    'RESULT',
    'NOTE',
    'NOTEON',
    'NOTEOFF',
    'KEYPRESS',
    'CONTROLLER',
    'PGMCHANGE',
    'CHANPRESS',
    'PITCHBEND',
    'CONTROL14',
    'NONREGPARAM',
    'REGPARAM',
    'SONGPOS',
    'SONGSEL',
    'QFRAME',
    'TIMESIGN',
    'KEYSIGN',
    'START',
    'CONTINUE',
    'STOP',
    'SETPOS_TICK',
    'SETPOS_TIME',
    'TEMPO',
    'CLOCK',
    'TICK',
    'QUEUE_SKEW',
    'TUNE_REQUEST',
    'RESET',
    'SENSING',
    'ECHO',
    'OSS',
    'CLIENT_START',
    'CLIENT_EXIT',
    'CLIENT_CHANGE',
    'PORT_START',
    'PORT_EXIT',
    'PORT_CHANGE',
    'PORT_SUBSCRIBED',
    'PORT_UNSUBSCRIBED',
    'USR0',
    'USR1',
    'USR2',
    'USR3',
    'USR4',
    'USR5',
    'USR6',
    'USR7',
    'USR8',
    'USR9',
    'SYSEX',
    'BOUNCE',
    'USR_VAR0',
    'USR_VAR1',
    'USR_VAR2',
    'USR_VAR3',
    'USR_VAR4',
    'NONE',
)

types = {
    ALSASeq.ClientNumberEnum:   client_number_enumerators,
    ALSASeq.ClientTypeEnum:     client_type_enumerators,
    ALSASeq.ClientFilterFlag:   client_filter_flags,
    ALSASeq.PortNumberEnum:     port_number_enumerators,
    ALSASeq.PortTypeFlag:       port_type_flags,
    ALSASeq.PortCapFlag:        port_cap_flags,
    ALSASeq.PortCondFlag:       port_cond_flags,
    ALSASeq.EventTypeEnum:      event_type_enumerators,
}

for obj, types in types.items():
    for t in types:
        if not hasattr(obj, t):
            print('Enumerator {0} is not produced.'.format(t))
            exit(1)
